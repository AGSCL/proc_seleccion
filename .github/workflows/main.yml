on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * MON' # Cada lunes a las 00:00

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        r-version: [4.4.0] # Asegúrate de que la versión de R coincida con la que necesitas

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: https://packagemanager.posit.co/cran/latest # Especifica un espejo CRAN válido
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_LIBS_USER: D:\a\_temp\renv # Directorio para renv

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configurar R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.r-version }}

      - name: Configurar Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Descargar e instalar JAGS
        run: |
          curl -o wjags.exe -L "https://sourceforge.net/projects/mcmc-jags/files/JAGS/4.x/Windows/JAGS-4.3.0.exe"
          wjags.exe /S
          del wjags.exe

      - name: Recuperar entorno renv
        uses: r-lib/actions/setup-renv@v2

      - name: Instalar dependencias con renv
        run: |
          options(repos = c(CRAN = "https://cloud.r-project.org")) # Especifica un CRAN válido
          options(pkgType = "binary") # Prefiere paquetes binarios
          renv::restore()

      - name: Cache de renv
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.R_LIBS_USER }}
            renv/library/R-*
            renv/cache/
          key: ${{ runner.os }}-r-${{ hashFiles('**/renv.lock') }}
          restore-keys: ${{ runner.os }}-r-

      - name: Procesar RMarkdown
        if: success() # Solo ejecutar si el paso anterior tuvo éxito
        run: |
          Rscript -e "rmarkdown::render('proy_proc_sel.Rmd')"

      - name: Eliminar archivos desktop.ini
        run: |
          Rscript -e "
            folder_path <- './'
            files <- list.files(folder_path, recursive = TRUE, full.names = TRUE)
            for (file in files) {
              if (tolower(basename(file)) == 'desktop.ini') {
                tryCatch({
                  file.remove(file)
                  print(paste('Eliminado', file))
                }, error = function(e) {
                  print(paste('Error al eliminar', file, ':', e$message))
                })
              }
            }
          "

      - name: Confirmar y subir cambios
        run: |
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"
          git config --local user.name "${{ github.actor }}"
          git add .
          git commit -m "Actualizar renv.lock y contenido renderizado [skip ci]" --allow-empty
          git push -f
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
